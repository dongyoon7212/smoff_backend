<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smoff.smoff.mapper.UserMapper">

    <resultMap id="UserResultMap" type="com.smoff.smoff.entity.User">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="username" column="username" />
        <result property="age" column="age" />
        <result property="roleType" column="role_type" />
        <result property="profileImg" column="profile_img" />
        <result property="createDt" column="create_dt" />
        <result property="updateDt" column="update_dt" />
        <collection property="userRoles" resultMap="UserRoleResultMap"/>
    </resultMap>

    <resultMap id="RoleResultMap" type="com.smoff.smoff.entity.Role">
        <id property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleNameKor" column="role_name_kor"/>
    </resultMap>

    <resultMap id="UserRoleResultMap" type="com.smoff.smoff.entity.UserRole">
        <id property="userRoleId" column="user_role_id"/>
        <result property="userId" column="urt_user_id"/>
        <result property="roleId" column="urt_role_id"/>
        <result property="createDt" column="urt_create_dt"/>
        <result property="updateDt" column="urt_update_dt"/>
        <association property="role" resultMap="RoleResultMap"/>
    </resultMap>
    
<!--  ================================================   Auth   =====================================================  -->

    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">
        insert into
            user_tb
        values(
            0,
            #{email},
            #{password},
            #{username},
            ${age}, ${roleType},
            "https://firebasestorage.googleapis.com/v0/b/smoff-26895.firebasestorage.app/o/profile-img%2Fprofile.png?alt=media&amp;token=a408d456-55c8-4031-aaa0-16a14b92a3cb",
            now(),
            null,
            null
        );
    </insert>

    <select id="getUserByUserId" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.email,
            ut.password,
            ut.username,
            ut.age,
            ut.role_type,
            ut.profile_img,
            ut.create_dt,
            ut.update_dt,
            ut.delete_dt,

            urt.user_role_id,
            urt.user_id AS urt_user_id,
            urt.role_id AS urt_role_id,
            urt.create_dt AS urt_create_dt,
            urt.update_dt AS urt_update_dt,

            rt.role_id,
            rt.role_name,
            rt.role_name_kor
        from
            user_tb ut
            left outer join user_role_tb urt on (urt.user_id = ut.user_id)
            left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
            ut.user_id = #{userId}
    </select>

    <select id="getUserByUsername" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.email,
            ut.password,
            ut.username,
            ut.age,
            ut.role_type,
            ut.profile_img,
            ut.create_dt,
            ut.update_dt,
            ut.delete_dt,

            urt.user_role_id,
            urt.user_id AS urt_user_id,
            urt.role_id AS urt_role_id,
            urt.create_dt AS urt_create_dt,
            urt.update_dt AS urt_update_dt,

            rt.role_id,
            rt.role_name,
            rt.role_name_kor
        from
            user_tb ut
            left outer join user_role_tb urt on (urt.user_id = ut.user_id)
            left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
            ut.username = #{username}
    </select>

    <select id="getUserByEmail" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.email,
            ut.password,
            ut.username,
            ut.age,
            ut.role_type,
            ut.profile_img,
            ut.create_dt,
            ut.update_dt,
            ut.delete_dt,

            urt.user_role_id,
            urt.user_id AS urt_user_id,
            urt.role_id AS urt_role_id,
            urt.create_dt AS urt_create_dt,
            urt.update_dt AS urt_update_dt,

            rt.role_id,
            rt.role_name,
            rt.role_name_kor
        from
            user_tb ut
            left outer join user_role_tb urt on (urt.user_id = ut.user_id)
            left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
            ut.email = #{email}
    </select>
    
    <update id="softDeleteUser">
        update
        from
            user_tb
        set
            delete_dt = date_add(now(), INTERVAL 30 DAY)
        from
            user_id = #{userId}
    </update>

    <!--  ================================================   Account   =====================================================  -->

    <update id="changePassword" >
        update
        from
            user_tb
        set
            password = #{password},
            update_dt = now()
        where
            user_id = #{userId}
    </update>

    <update id="changeUsername" >
        update
        from
            user_tb
        set
            username = #{username},
            update_dt = now()
        where
            user_id = #{userId}
    </update>
</mapper>